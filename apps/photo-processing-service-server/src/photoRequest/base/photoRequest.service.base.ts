/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PhotoRequest as PrismaPhotoRequest,
  User as PrismaUser,
} from "@prisma/client";

export class PhotoRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PhotoRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.photoRequest.count(args);
  }

  async photoRequests(
    args: Prisma.PhotoRequestFindManyArgs
  ): Promise<PrismaPhotoRequest[]> {
    return this.prisma.photoRequest.findMany(args);
  }
  async photoRequest(
    args: Prisma.PhotoRequestFindUniqueArgs
  ): Promise<PrismaPhotoRequest | null> {
    return this.prisma.photoRequest.findUnique(args);
  }
  async createPhotoRequest(
    args: Prisma.PhotoRequestCreateArgs
  ): Promise<PrismaPhotoRequest> {
    return this.prisma.photoRequest.create(args);
  }
  async updatePhotoRequest(
    args: Prisma.PhotoRequestUpdateArgs
  ): Promise<PrismaPhotoRequest> {
    return this.prisma.photoRequest.update(args);
  }
  async deletePhotoRequest(
    args: Prisma.PhotoRequestDeleteArgs
  ): Promise<PrismaPhotoRequest> {
    return this.prisma.photoRequest.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.photoRequest
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
