/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PhotoRequestService } from "../photoRequest.service";
import { PhotoRequestCreateInput } from "./PhotoRequestCreateInput";
import { PhotoRequest } from "./PhotoRequest";
import { PhotoRequestFindManyArgs } from "./PhotoRequestFindManyArgs";
import { PhotoRequestWhereUniqueInput } from "./PhotoRequestWhereUniqueInput";
import { PhotoRequestUpdateInput } from "./PhotoRequestUpdateInput";

export class PhotoRequestControllerBase {
  constructor(protected readonly service: PhotoRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PhotoRequest })
  async createPhotoRequest(
    @common.Body() data: PhotoRequestCreateInput
  ): Promise<PhotoRequest> {
    return await this.service.createPhotoRequest({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        photoUrl: true,
        resultUrl: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PhotoRequest] })
  @ApiNestedQuery(PhotoRequestFindManyArgs)
  async photoRequests(@common.Req() request: Request): Promise<PhotoRequest[]> {
    const args = plainToClass(PhotoRequestFindManyArgs, request.query);
    return this.service.photoRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        photoUrl: true,
        resultUrl: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PhotoRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async photoRequest(
    @common.Param() params: PhotoRequestWhereUniqueInput
  ): Promise<PhotoRequest | null> {
    const result = await this.service.photoRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        photoUrl: true,
        resultUrl: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PhotoRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePhotoRequest(
    @common.Param() params: PhotoRequestWhereUniqueInput,
    @common.Body() data: PhotoRequestUpdateInput
  ): Promise<PhotoRequest | null> {
    try {
      return await this.service.updatePhotoRequest({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          photoUrl: true,
          resultUrl: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PhotoRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePhotoRequest(
    @common.Param() params: PhotoRequestWhereUniqueInput
  ): Promise<PhotoRequest | null> {
    try {
      return await this.service.deletePhotoRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          photoUrl: true,
          resultUrl: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
