/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PhotoRequest } from "./PhotoRequest";
import { PhotoRequestCountArgs } from "./PhotoRequestCountArgs";
import { PhotoRequestFindManyArgs } from "./PhotoRequestFindManyArgs";
import { PhotoRequestFindUniqueArgs } from "./PhotoRequestFindUniqueArgs";
import { CreatePhotoRequestArgs } from "./CreatePhotoRequestArgs";
import { UpdatePhotoRequestArgs } from "./UpdatePhotoRequestArgs";
import { DeletePhotoRequestArgs } from "./DeletePhotoRequestArgs";
import { User } from "../../user/base/User";
import { PhotoRequestService } from "../photoRequest.service";
@graphql.Resolver(() => PhotoRequest)
export class PhotoRequestResolverBase {
  constructor(protected readonly service: PhotoRequestService) {}

  async _photoRequestsMeta(
    @graphql.Args() args: PhotoRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PhotoRequest])
  async photoRequests(
    @graphql.Args() args: PhotoRequestFindManyArgs
  ): Promise<PhotoRequest[]> {
    return this.service.photoRequests(args);
  }

  @graphql.Query(() => PhotoRequest, { nullable: true })
  async photoRequest(
    @graphql.Args() args: PhotoRequestFindUniqueArgs
  ): Promise<PhotoRequest | null> {
    const result = await this.service.photoRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PhotoRequest)
  async createPhotoRequest(
    @graphql.Args() args: CreatePhotoRequestArgs
  ): Promise<PhotoRequest> {
    return await this.service.createPhotoRequest({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PhotoRequest)
  async updatePhotoRequest(
    @graphql.Args() args: UpdatePhotoRequestArgs
  ): Promise<PhotoRequest | null> {
    try {
      return await this.service.updatePhotoRequest({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PhotoRequest)
  async deletePhotoRequest(
    @graphql.Args() args: DeletePhotoRequestArgs
  ): Promise<PhotoRequest | null> {
    try {
      return await this.service.deletePhotoRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: PhotoRequest): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
