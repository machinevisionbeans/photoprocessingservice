/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Plan as PrismaPlan,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class PlanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PlanCountArgs, "select">): Promise<number> {
    return this.prisma.plan.count(args);
  }

  async plans(args: Prisma.PlanFindManyArgs): Promise<PrismaPlan[]> {
    return this.prisma.plan.findMany(args);
  }
  async plan(args: Prisma.PlanFindUniqueArgs): Promise<PrismaPlan | null> {
    return this.prisma.plan.findUnique(args);
  }
  async createPlan(args: Prisma.PlanCreateArgs): Promise<PrismaPlan> {
    return this.prisma.plan.create(args);
  }
  async updatePlan(args: Prisma.PlanUpdateArgs): Promise<PrismaPlan> {
    return this.prisma.plan.update(args);
  }
  async deletePlan(args: Prisma.PlanDeleteArgs): Promise<PrismaPlan> {
    return this.prisma.plan.delete(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.plan
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }
}
